// Generated by Apple Swift version 5.0 effective-4.1.50 (swiftlang-1001.0.69.5 clang-1001.0.46.3)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import CoreLocation;
@import FirebaseMessaging;
@import Foundation;
@import MapKit;
@import ObjectiveC;
@import UIKit;
@import WatchKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MsgaiChat",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSCoder;
@class UICollectionViewLayoutAttributes;

/// A <code>UICollectionViewFlowLayout</code> subclass that gives you control
/// over the horizontal and vertical alignment of the cells.
/// You can use it to align the cells like words in a left- or right-aligned text
/// and you can specify how the cells are vertically aligned in their row.
SWIFT_CLASS("_TtC9MsgaiChat31AlignedCollectionViewFlowLayout")
@interface AlignedCollectionViewFlowLayout : UICollectionViewFlowLayout
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSArray<UICollectionViewLayoutAttributes *> * _Nullable)layoutAttributesForElementsInRect:(CGRect)rect SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end



@class NSBundle;

SWIFT_CLASS("_TtC9MsgaiChat21ImageViewerController")
@interface ImageViewerController : UIViewController
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class UIGestureRecognizer;

@interface ImageViewerController (SWIFT_EXTENSION(MsgaiChat)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end

@class UIScrollView;
@class UIView;

@interface ImageViewerController (SWIFT_EXTENSION(MsgaiChat)) <UIScrollViewDelegate>
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
- (void)scrollViewDidZoom:(UIScrollView * _Nonnull)scrollView;
@end




SWIFT_CLASS("_TtC9MsgaiChat12LocationCell")
@interface LocationCell : UITableViewCell
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// A <code>MKMapItem</code> encapsulation class to save you from importing <code>MapKit</code> everywhere in you project and provide some convenience.
/// important:
///
/// This class is a encapsulation of <code>MKMapItem</code>, you can access the <code>MKMapItem</code> object via <code>mapItem</code> property.
/// note:
///
/// <code>LocationItem</code> provides some get-only computed property to access properties of <code>MKMapItem</code> object more easily.
/// \code
///  var name: String
///  var coordinate: (latitude: Double, longitude: Double)
///  var addressDictionary: [NSObject: AnyObject]?
///  var formattedAddressString: String?
///
/// \endcodeThis class provides two initialization methods, you can either provide a <code>MKMapItem</code> object or provide a coordinate and an address dictionary to initialize.
/// This class is hashable, the hash value of this class is the hash value of the combined string of latitude and longitude.
/// This class is equalable, objects have the same latitude and longitude are equal.
/// Objects of this class can be encoded and decoded.
/// \code
///    let locationData = NSKeyedArchiver.archivedDataWithRootObject(locationItem)
///    let locationItem = NSKeyedUnarchiver.unarchiveObjectWithData(locationData) as! LocationItem
///
/// \endcode
SWIFT_CLASS("_TtC9MsgaiChat12LocationItem")
@interface LocationItem : NSObject <NSCoding>
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9MsgaiChat14LocationPicker")
@interface LocationPicker : UIViewController <UIGestureRecognizerDelegate>
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
@property (nonatomic, readonly) UIInterfaceOrientation preferredInterfaceOrientationForPresentation;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class MKMapView;

@interface LocationPicker (SWIFT_EXTENSION(MsgaiChat)) <MKMapViewDelegate>
- (void)mapView:(MKMapView * _Nonnull)mapView regionWillChangeAnimated:(BOOL)animated;
- (void)mapView:(MKMapView * _Nonnull)mapView regionDidChangeAnimated:(BOOL)animated;
@end

@class CLLocationManager;
@class CLLocation;

@interface LocationPicker (SWIFT_EXTENSION(MsgaiChat)) <CLLocationManagerDelegate>
- (void)locationManager:(CLLocationManager * _Nonnull)manager didFailWithError:(NSError * _Nonnull)error;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
@end

@class UISearchBar;

@interface LocationPicker (SWIFT_EXTENSION(MsgaiChat)) <UISearchBarDelegate>
- (void)searchBar:(UISearchBar * _Nonnull)searchBar textDidChange:(NSString * _Nonnull)searchText;
- (void)searchBarSearchButtonClicked:(UISearchBar * _Nonnull)searchBar;
@end


@interface LocationPicker (SWIFT_EXTENSION(MsgaiChat))
/// This method would be called everytime user select a location including the change of region of the map view.
/// important:
///
/// This method includes the following codes:
/// selectCompletion?(locationItem)
/// delegate?.locationDidSelect?(locationItem)
/// So, if you override it without calling <code>super.locationDidSelect(locationItem)</code>, completion closure and delegate method would not be called.
/// note:
///
/// This method would be called multiple times, because user may change selection before final decision.
/// To do something with user’s final decition, use <code>func locationDidPick(locationItem: LocationItem)</code> instead.
/// Alternatively, the same result can be achieved by:
/// <ul>
///   <li>
///     Closure
///   </li>
/// </ul>
/// <ol>
///   <li>
///     set <code>var selectCompletion</code>
///   </li>
/// </ol>
/// <ul>
///   <li>
///     Delegate
///   </li>
/// </ul>
/// <ol>
///   <li>
///     conform to <code>protocol LocationPickerDelegate</code>
///   </li>
///   <li>
///     set the <code>var delegate</code>
///   </li>
///   <li>
///     implement <code>func locationDidPick(locationItem: LocationItem)</code>
///   </li>
/// </ol>
/// seealso:
///
/// <code>var selectCompletion: ((LocationItem) -> Void)?</code>
/// <code>func locationDidPick(locationItem: LocationItem)</code>
/// <code>protocol LocationPickerDelegate</code>
/// \param locationItem The location item user selected
///
- (void)locationDidSelectWithLocationItem:(LocationItem * _Nonnull)locationItem;
/// This method would be called after user finally pick a location.
/// important:
///
/// This method includes the following codes:
/// pickCompletion?(locationItem)
/// delegate?.locationDidPick?(locationItem)
/// So, if you override it without calling <code>super.locationDidPick(locationItem)</code>, completion closure and delegate method would not be called.
/// note:
///
/// This method would be called only once in <code>func viewWillDisappear(animated: Bool)</code> before this instance of <code>LocationPicker</code> dismissed.
/// To get user’s every selection, use <code>func locationDidSelect(locationItem: LocationItem)</code> instead.
/// Alternatively, the same result can be achieved by:
/// <ul>
///   <li>
///     Closure
///   </li>
/// </ul>
/// <ol>
///   <li>
///     set <code>var pickCompletion</code>
///   </li>
/// </ol>
/// <ul>
///   <li>
///     Delegate
///   </li>
/// </ul>
/// <ol>
///   <li>
///     conform to <code>protocol LocationPickerDelegate</code>
///   </li>
///   <li>
///     set the <code>var delegate</code>
///   </li>
///   <li>
///     implement <code>func locationDidPick(locationItem: LocationItem)</code>
///   </li>
/// </ol>
/// seealso:
///
/// <code>var pickCompletion: ((LocationItem) -> Void)?</code>
/// <code>func locationDidSelect(locationItem: LocationItem)</code>
/// <code>protocol LocationPickerDelegate</code>
/// \param locationItem The location item user picked
///
- (void)locationDidPickWithLocationItem:(LocationItem * _Nonnull)locationItem;
@end

@class UITableView;

@interface LocationPicker (SWIFT_EXTENSION(MsgaiChat)) <UITableViewDataSource, UITableViewDelegate>
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (BOOL)tableView:(UITableView * _Nonnull)tableView canEditRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


SWIFT_PROTOCOL("_TtP9MsgaiChat24LocationPickerDataSource_")
@protocol LocationPickerDataSource
/// Tell the <code>tableView</code> of <code>LocationPicker</code> how many locations you want to add to the location list.
///
/// returns:
/// The number of locations you would like to display in the list
- (NSInteger)numberOfAlternativeLocations SWIFT_WARN_UNUSED_RESULT;
/// Provide the location item to the location list.
/// \param index The index of the location item
///
///
/// returns:
/// The location item in the specific index
- (LocationItem * _Nonnull)alternativeLocationAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
@optional
/// This delegate method would be called after user delete an alternative location.
/// note:
///
/// This method would be called when user delete a location cell from <code>tableView</code>.
/// User can only delete the location provided in <code>var alternativeLocations</code> or <code>dataSource</code> method <code>alternativeLocationAtIndex(index: Int) -> LocationItem</code>.
/// Alternatively, the same result can be achieved by:
/// <ul>
///   <li>
///     Closure
///   </li>
/// </ul>
/// <ol>
///   <li>
///     set <code>var deleteCompletion</code>
///   </li>
/// </ol>
/// <ul>
///   <li>
///     Override
///   </li>
/// </ul>
/// <ol>
///   <li>
///     create a subclass of <code>class LocationPicker</code>
///   </li>
///   <li>
///     override <code>func alternativeLocationDidDelete(locationItem: LocationItem)</code>
///   </li>
/// </ol>
/// seealso:
///
/// <code>var deleteCompletion: ((LocationItem) -> Void)?</code>
/// <code>protocol LocationPickerDelegate</code>
/// \param locationItem The location item needs to be deleted
///
- (void)commitAlternativeLocationDeletionWithLocationItem:(LocationItem * _Nonnull)locationItem;
@end


/// All methods of this protocol are optional, they allow the delegate to perform actions.
SWIFT_PROTOCOL("_TtP9MsgaiChat22LocationPickerDelegate_")
@protocol LocationPickerDelegate
@optional
/// This delegate method would be called everytime user select a location including the change of region of the map view.
/// note:
///
/// This method would be called multiple times, because user may change selection before final decision.
/// To do something with user’s final decition, use <code>func locationDidPick(locationItem: LocationItem)</code> instead.
/// Alternatively, the same result can be achieved by:
/// <ul>
///   <li>
///     Closure
///   </li>
/// </ul>
/// <ol>
///   <li>
///     set <code>var selectCompletion</code>
///   </li>
/// </ol>
/// <ul>
///   <li>
///     Overrride
///   </li>
/// </ul>
/// <ol>
///   <li>
///     create a subclass of <code>class LocationPicker</code>
///   </li>
///   <li>
///     override <code>func locationDidSelect(locationItem: LocationItem)</code>
///   </li>
/// </ol>
/// seealso:
///
/// <code>var selectCompletion: ((LocationItem) -> Void)?</code>
/// <code>func locationDidPick(locationItem: LocationItem)</code>
/// <code>protocol LocationPickerDataSource</code>
/// \param locationItem The location item user selected
///
- (void)locationDidSelectWithLocationItem:(LocationItem * _Nonnull)locationItem;
/// This delegate method would be called after user finally pick a location.
/// note:
///
/// This method would be called only once in <code>func viewWillDisappear(animated: Bool)</code> before this instance of <code>LocationPicker</code> dismissed.
/// To get user’s every selection, use <code>func locationDidSelect(locationItem: LocationItem)</code> instead.
/// Alternatively, the same result can be achieved by:
/// <ul>
///   <li>
///     Closure
///   </li>
/// </ul>
/// <ol>
///   <li>
///     set <code>var pickCompletion</code>
///   </li>
/// </ol>
/// <ul>
///   <li>
///     Override
///   </li>
/// </ul>
/// <ol>
///   <li>
///     create a subclass of <code>class LocationPicker</code>
///   </li>
///   <li>
///     override <code>func locationDidPick(locationItem: LocationItem)</code>
///   </li>
/// </ol>
/// seealso:
///
/// <code>var pickCompletion: ((LocationItem) -> Void)?</code>
/// <code>func locationDidSelect(locationItem: LocationItem)</code>
/// <code>protocol LocationPickerDataSource</code>
/// \param locationItem The location item user picked
///
- (void)locationDidPickWithLocationItem:(LocationItem * _Nonnull)locationItem;
/// This delegate method would be called when user try to fetch current location without granting location access.
/// note:
///
/// If you wish to present an alert view controller, just ignore this method. You can provide a fully cutomized <code>UIAlertController</code> to <code>var locationDeniedAlertController</code>, or configure the alert view controller provided by <code>LocationPicker</code> using <code>func setLocationDeniedAlertControllerTitle</code>.
/// Alternatively, the same result can be achieved by:
/// <ul>
///   <li>
///     Closure
///   </li>
/// </ul>
/// <ol>
///   <li>
///     set <code>var locationDeniedHandler</code>
///   </li>
/// </ol>
/// <ul>
///   <li>
///     Override
///   </li>
/// </ul>
/// <ol>
///   <li>
///     create a subclass of <code>class LocationPicker</code>
///   </li>
///   <li>
///     override <code>func locationDidDeny(locationPicker: LocationPicker)</code>
///   </li>
/// </ol>
/// seealso:
///
/// <code>var locationDeniedHandler: ((LocationPicker) -> Void)?</code>
/// <code>protocol LocationPickerDataSource</code>
/// <code>var locationDeniedAlertController</code>
/// <code>func setLocationDeniedAlertControllerTitle</code>
/// \param locationPicker <code>LocationPicker</code> instance that needs to response to user’s location request
///
- (void)locationDidDenyWithLocationPicker:(LocationPicker * _Nonnull)locationPicker;
@end

typedef SWIFT_ENUM(NSInteger, MCActionType, closed) {
  MCActionTypePostBack = 0,
  MCActionTypeWeb = 1,
  MCActionTypeUnknown = 2,
  MCActionTypeLocation = 3,
  MCActionTypeCall = 4,
  MCActionTypeMenu = 5,
  MCActionTypeClose = 6,
  MCActionTypeDeeplink = 7,
};

typedef SWIFT_ENUM(NSInteger, MCLogType, closed) {
  MCLogTypeInfo = 0,
  MCLogTypeDebug = 1,
  MCLogTypeWarning = 2,
  MCLogTypeError = 3,
};

enum MCMessageType : NSInteger;
@class MCJSON;
enum MCMessageStatus : NSInteger;

SWIFT_CLASS("_TtC9MsgaiChat9MCMessage")
@interface MCMessage : NSObject
@property (nonatomic, copy) NSDate * _Nullable date;
@property (nonatomic) BOOL isReceivedMessage;
@property (nonatomic, copy) NSString * _Nullable messageText;
@property (nonatomic) enum MCMessageType messageType;
@property (nonatomic, copy) NSArray<MCJSON *> * _Nullable quickReplies;
@property (nonatomic, copy) NSArray<MCJSON *> * _Nullable arrayOfButtons;
@property (nonatomic, copy) NSArray<MCJSON *> * _Nullable arrayOfElements;
@property (nonatomic, strong) MCJSON * _Nullable webLink;
@property (nonatomic, strong) MCJSON * _Nullable json;
@property (nonatomic) enum MCMessageStatus status;
@property (nonatomic, copy) NSString * _Nonnull messageId;
@property (nonatomic, copy) NSString * _Nonnull requestId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, MCMessageStatus, closed) {
  MCMessageStatusSent = 1,
  MCMessageStatusDelivered = 2,
  MCMessageStatusRead = 3,
  MCMessageStatusFailed = 4,
  MCMessageStatusUnknown = 0,
};

enum MCMessageStylePosition : NSInteger;
enum MCMessageStyleAlignment : NSInteger;
enum MCMessageStyleFont : NSInteger;

SWIFT_CLASS("_TtC9MsgaiChat14MCMessageStyle")
@interface MCMessageStyle : NSObject
@property (nonatomic) enum MCMessageStylePosition position;
@property (nonatomic) enum MCMessageStyleAlignment alignment;
@property (nonatomic) BOOL transient;
@property (nonatomic) enum MCMessageStyleFont font;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, MCMessageStyleAlignment, closed) {
  MCMessageStyleAlignmentHorizontal = 0,
  MCMessageStyleAlignmentVertical = 1,
  MCMessageStyleAlignmentUnknown = 2,
};

typedef SWIFT_ENUM(NSInteger, MCMessageStyleFont, closed) {
  MCMessageStyleFontHelptext = 0,
  MCMessageStyleFontSmalltextParagraph = 1,
  MCMessageStyleFontUnknown = 2,
};

typedef SWIFT_ENUM(NSInteger, MCMessageStylePosition, closed) {
  MCMessageStylePositionTop = 0,
  MCMessageStylePositionBottom = 1,
  MCMessageStylePositionTopLeft = 2,
  MCMessageStylePositionBottomRight = 3,
  MCMessageStylePositionUnknown = 4,
};

typedef SWIFT_ENUM(NSInteger, MCMessageType, closed) {
  MCMessageTypeText = 0,
  MCMessageTypeWelcome = 1,
  MCMessageTypePostBack = 2,
  MCMessageTypeTextParagraph = 3,
  MCMessageTypeCard = 4,
  MCMessageTypeWeblink = 5,
  MCMessageTypeGroupList = 6,
  MCMessageTypeCarousel = 7,
  MCMessageTypeImage = 8,
  MCMessageTypeVideo = 9,
  MCMessageTypeLocation = 10,
  MCMessageTypeLocationRequest = 11,
  MCMessageTypeListTemplate = 12,
  MCMessageTypeDeepLink = 13,
  MCMessageTypeUnknown = 14,
};

@class UIColor;
@class UIFont;
@class NSAttributedString;
@class NSTextContainer;

SWIFT_CLASS("_TtC9MsgaiChat21MCPlaceholderTextView")
@interface MCPlaceholderTextView : UITextView
@property (nonatomic, copy) NSString * _Nonnull placeholder;
@property (nonatomic, strong) UIColor * _Nonnull placeholderColor;
@property (nonatomic, strong) UIFont * _Null_unspecified font;
@property (nonatomic) NSTextAlignment textAlignment;
@property (nonatomic, copy) NSString * _Null_unspecified text;
@property (nonatomic, strong) NSAttributedString * _Null_unspecified attributedText;
@property (nonatomic) UIEdgeInsets textContainerInset;
- (nonnull instancetype)initWithFrame:(CGRect)frame textContainer:(NSTextContainer * _Nullable)textContainer OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end

@class UIImage;

SWIFT_CLASS("_TtC9MsgaiChat10MCSettings")
@interface MCSettings : NSObject
/// MsgaiChat SDK supports region setting, default region is USA(“us”). European Union region code is “eu”. Contact MSGAI for getting more details about region codes.
@property (nonatomic, copy) NSString * _Nonnull region;
/// Brand logo image will be used as sender icon in chat bubble.
@property (nonatomic, strong) UIImage * _Nullable brandLogo;
/// Brand name will be displayed as title of the Chat window.
@property (nonatomic, copy) NSString * _Nullable brandName;
/// Greetings background image, this image will be displayed as background image for First/Greetings message(Good Morning/Evening/Noon)
@property (nonatomic, strong) UIImage * _Nullable greetingsImage;
/// Placeholder image for all imageviews which are loading image from remote URL.
@property (nonatomic, strong) UIImage * _Nullable placeholderImage;
/// chatTextFieldPlaceholder: it will be displayed in chat text box when user not entered anything.
@property (nonatomic, copy) NSString * _Nonnull chatTextFieldPlaceholder;
/// Chat view status bar style.
@property (nonatomic) UIStatusBarStyle statusBarStyle;
/// Language code for MsgaiChat SDK.
@property (nonatomic, copy) NSString * _Nullable languageCode;
/// Default is False, SDK will use sandbox environment. Set True when want to use our live server.
@property (nonatomic) BOOL isLive;
/// Default value is True, SDK will detect system’s language and make it effective for SDK as well. Set False if you want to disable this auto detection feature.
@property (nonatomic) BOOL autoLanguageDetectionEnabled;
+ (MCSettings * _Nonnull)defaultSettings SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9MsgaiChat6MCUser")
@interface MCUser : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull GenderMale;)
+ (NSString * _Nonnull)GenderMale SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull GenderFemale;)
+ (NSString * _Nonnull)GenderFemale SWIFT_WARN_UNUSED_RESULT;
+ (MCUser * _Nonnull)currentUser SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull appUserId;
@property (nonatomic, copy) NSString * _Nullable crmId;
@property (nonatomic, copy) NSString * _Nullable firstName;
@property (nonatomic, copy) NSString * _Nullable lastName;
@property (nonatomic, copy) NSString * _Nullable gender;
@property (nonatomic, copy) NSString * _Nullable location;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable properties;
@property (nonatomic, strong) UIImage * _Nullable profilePicture;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end



@protocol MsgaiChatDelegate;

SWIFT_CLASS("_TtC9MsgaiChat9MsgaiChat")
@interface MsgaiChat : NSObject
/// Initialize the SDK.
/// MSGAIBotKey and SecretKey get it from MSGAI Portal.
/// \param botKey <#botKey description#>
///
/// \param secretKey <#secretKey description#>
///
/// \param settings <#settings description#>
///
/// \param launchOptions <#launchOptions description#>
///
+ (void)withBotKey:(NSString * _Nonnull)botKey secretKey:(NSString * _Nonnull)secretKey settings:(MCSettings * _Nonnull)settings launchOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions;
/// Passing user details to MsgaiChat SDK will provide more user specific service and support.
/// \param user <#user description#>
///
+ (void)setUser:(MCUser * _Nonnull)user;
+ (void)setDelegate:(id <MsgaiChatDelegate> _Nonnull)delegate;
/// Start MSGAI Chat session, just call startChat method then SDK will take care of the entire flow including design and communications handlings.
+ (void)startChat;
/// Initiating chat with prefilled message, this text will be send to server while opening the chat window. So that user can skip their first message to bot, like “Hi” message.
/// \param text <#text description#>
///
+ (void)startChatWithText:(NSString * _Nonnull)text;
/// Host app can directly send text message to user behalf of bot.
/// \param messages <#messages description#>
///
+ (void)postTextMessageToUser:(NSArray<NSString *> * _Nonnull)messages;
/// Stop MSGAI Chat session, call finishChat.
+ (void)finishChat;
/// Clear in memory chat history messages.
+ (void)clearChatHistory;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// Pass #requestId which you get if from bot response by send message to bot. Success block will be called with array of messages, messages will be instances of MCMessage class, you can use and display in to user by using your own UI controls.
/// \param requestId <#requestId description#>
///
/// \param success <#success description#>
///
/// \param failure <#failure description#>
///
+ (void)getResponseForRequestId:(NSString * _Nonnull)requestId success:(void (^ _Nullable)(NSArray<MCMessage *> * _Nonnull))success failure:(void (^ _Nullable)(NSError * _Nullable))failure;
/// Send plain text message, request id will be received on successful completion of the send process. You need to use this request id to get bot response for your message.
/// \param text <#text description#>
///
/// \param messageId Optional param, you can use this ID as reference to your message. It may helpful when you update the message status like message sent successfully or failed.
///
/// \param success <#success description#>
///
/// \param failure <#failure description#>
///
+ (void)postMessageWithText:(NSString * _Nonnull)text messageId:(NSString * _Nonnull)messageId success:(void (^ _Nullable)(NSString * _Nonnull, NSString * _Nonnull))success failure:(void (^ _Nullable)(NSString * _Nonnull, NSError * _Nullable))failure;
/// Send payload text and respective label, request id will be received on successful completion of the send process. You need to use this request id to get bot response for your message.
/// \param payload <#payload description#>
///
/// \param label <#label description#>
///
/// \param messageId Optional param, you can use this ID as reference to your message. It may helpful when you update the message status like message sent successfully or failed.
///
/// \param success <#success description#>
///
/// \param failure <#failure description#>
///
+ (void)postMessageWithPayload:(NSString * _Nonnull)payload label:(NSString * _Nonnull)label messageId:(NSString * _Nonnull)messageId success:(void (^ _Nullable)(NSString * _Nonnull, NSString * _Nonnull))success failure:(void (^ _Nullable)(NSString * _Nonnull, NSError * _Nullable))failure;
/// Send location to bot.
/// \param venueName Name of the place.
///
/// \param latitude Venue’s latitude.
///
/// \param longitude Venue’s longitude.
///
/// \param messageId Optional param, you can use this ID as reference to your message. It may helpful when you update the message status like message sent successfully or failed.
///
/// \param success <#success description#>
///
/// \param failure <#failure description#>
///
+ (void)postLocationMessageWithVenueName:(NSString * _Nonnull)venueName latitude:(double)latitude longitude:(double)longitude messageId:(NSString * _Nonnull)messageId success:(void (^ _Nullable)(NSString * _Nonnull, NSString * _Nonnull))success failure:(void (^ _Nullable)(NSString * _Nonnull, NSError * _Nullable))failure;
/// While user interact with bot, user details have been collected as user generated data. You can access these collected data by calling userDataProfile() method.
/// \param success <#success description#>
///
/// \param failure <#failure description#>
///
+ (void)userDataProfileWithSuccess:(SWIFT_NOESCAPE void (^ _Nonnull)(NSString * _Nonnull))success failure:(void (^ _Nullable)(NSError * _Nullable))failure;
/// Method to handle remote push notification from Firebase Cloud Message.
/// \param userInfo remote notification message.
///
///
/// returns:
/// true if SDK handles the message otherwise return false.
+ (BOOL)appDidReceiveMessageWithUserInfo:(NSDictionary * _Nonnull)userInfo SWIFT_WARN_UNUSED_RESULT;
+ (void)apnsTokenWithToken:(NSData * _Nonnull)token;
@end



@class FIRMessaging;
@class FIRMessagingRemoteMessage;

@interface MsgaiChat (SWIFT_EXTENSION(MsgaiChat)) <FIRMessagingDelegate>
- (void)messaging:(FIRMessaging * _Nonnull)messaging didReceiveMessage:(FIRMessagingRemoteMessage * _Nonnull)remoteMessage;
- (void)messaging:(FIRMessaging * _Nonnull)messaging didReceiveRegistrationToken:(NSString * _Nonnull)fcmToken;
@end


SWIFT_PROTOCOL("_TtP9MsgaiChat17MsgaiChatDelegate_")
@protocol MsgaiChatDelegate <NSObject>
@optional
- (void)chatViewUserMessagePosted:(NSArray<NSString *> * _Nonnull)messageJson;
- (void)chatViewBotPostedMessage:(NSArray<NSString *> * _Nonnull)messageJson;
- (void)chatViewDidAppear:(BOOL)animated;
- (void)chatViewDidDisappear:(BOOL)animated;
- (void)chatViewClosed;
- (void)chatViewLog:(enum MCLogType)type :(NSString * _Nonnull)text :(NSError * _Nullable)error;
@end




SWIFT_CLASS("_TtCE9MsgaiChatCSo11UITableView16ReverseExtension")
@interface ReverseExtension : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface ReverseExtension (SWIFT_EXTENSION(MsgaiChat)) <UITableViewDelegate>
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
- (void)tableView:(UITableView * _Nonnull)tableView willDisplayCell:(UITableViewCell * _Nonnull)cell forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)tableView:(UITableView * _Nonnull)tableView willDisplayHeaderView:(UIView * _Nonnull)view forSection:(NSInteger)section;
- (void)tableView:(UITableView * _Nonnull)tableView willDisplayFooterView:(UIView * _Nonnull)view forSection:(NSInteger)section;
@end


@interface ReverseExtension (SWIFT_EXTENSION(MsgaiChat)) <UITableViewDataSource>
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)tableView:(UITableView * _Nonnull)tableView titleForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)tableView:(UITableView * _Nonnull)tableView titleForFooterInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (BOOL)tableView:(UITableView * _Nonnull)tableView canEditRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (BOOL)tableView:(UITableView * _Nonnull)tableView canMoveRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nullable)sectionIndexTitlesForTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView sectionForSectionIndexTitle:(NSString * _Nonnull)title atIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)tableView:(UITableView * _Nonnull)tableView moveRowAtIndexPath:(NSIndexPath * _Nonnull)sourceIndexPath toIndexPath:(NSIndexPath * _Nonnull)destinationIndexPath;
@end












@interface UIColor (SWIFT_EXTENSION(MsgaiChat))
/// The shorthand three-digit hexadecimal representation of color.
/// #RGB defines to the color #RRGGBB.
/// \param hex3 Three-digit hexadecimal value.
///
/// \param alpha 0.0 - 1.0. The default is 1.0.
///
- (nonnull instancetype)initWithHex3:(uint16_t)hex3 alpha:(CGFloat)alpha;
/// The shorthand four-digit hexadecimal representation of color with alpha.
/// #RGBA defines to the color #RRGGBBAA.
/// \param hex4 Four-digit hexadecimal value.
///
- (nonnull instancetype)initWithHex4:(uint16_t)hex4;
/// The six-digit hexadecimal representation of color of the form #RRGGBB.
/// \param hex6 Six-digit hexadecimal value.
///
- (nonnull instancetype)initWithHex6:(uint32_t)hex6 alpha:(CGFloat)alpha;
/// The six-digit hexadecimal representation of color with alpha of the form #RRGGBBAA.
/// \param hex8 Eight-digit hexadecimal value.
///
- (nonnull instancetype)initWithHex8:(uint32_t)hex8;
/// The rgba string representation of color with alpha of the form #RRGGBBAA/#RRGGBB, throws error.
/// \param rgba String value.
///
- (nullable instancetype)initWithRgba_throws:(NSString * _Nonnull)rgba error:(NSError * _Nullable * _Nullable)error;
/// The rgba string representation of color with alpha of the form #RRGGBBAA/#RRGGBB, fails to default color.
/// \param rgba String value.
///
- (nonnull instancetype)initWithRgba:(NSString * _Nonnull)rgba defaultColor:(UIColor * _Nonnull)defaultColor;
/// Hex string of a UIColor instance.
/// \param rgba Whether the alpha should be included.
///
- (NSString * _Nonnull)hexString:(BOOL)includeAlpha SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end
















@interface UITableView (SWIFT_EXTENSION(MsgaiChat))
@end




@interface UITableView (SWIFT_EXTENSION(MsgaiChat))
- (void)willMoveToSuperview:(UIView * _Nullable)newSuperview;
@end


@interface UITableViewCell (SWIFT_EXTENSION(MsgaiChat))
- (void)willMoveToSuperview:(UIView * _Nullable)newSuperview;
@end











#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
